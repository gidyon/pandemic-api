// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	location "github.com/gidyon/pandemic-api/pkg/api/location"

	mock "github.com/stretchr/testify/mock"
)

// MessagingClientMock is an autogenerated mock type for the MessagingClientMock type
type MessagingClientMock struct {
	mock.Mock
}

// AlertContacts provides a mock function with given fields: ctx, opts
func (_m *MessagingClientMock) AlertContacts(ctx context.Context, opts ...grpc.CallOption) (location.Messaging_AlertContactsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 location.Messaging_AlertContactsClient
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) location.Messaging_AlertContactsClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(location.Messaging_AlertContactsClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BroadCastMessage provides a mock function with given fields: ctx, in, opts
func (_m *MessagingClientMock) BroadCastMessage(ctx context.Context, in *location.BroadCastMessageRequest, opts ...grpc.CallOption) (*location.BroadCastMessageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *location.BroadCastMessageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *location.BroadCastMessageRequest, ...grpc.CallOption) *location.BroadCastMessageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*location.BroadCastMessageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *location.BroadCastMessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: ctx, in, opts
func (_m *MessagingClientMock) SendMessage(ctx context.Context, in *location.SendMessageRequest, opts ...grpc.CallOption) (*location.SendMessageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *location.SendMessageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *location.SendMessageRequest, ...grpc.CallOption) *location.SendMessageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*location.SendMessageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *location.SendMessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
