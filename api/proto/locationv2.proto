syntax = "proto3";

package covitrace;

option go_package="location";

import "google/protobuf/empty.proto";
import "google/longrunning/operations.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

// Represents a geographic location
message Location {
    float longitude = 1;
    float latitude = 2;
    int64 timestamp = 3;
    float accuracy = 4;
    float altitude = 5;
    float speed = 6;
    float speed_accuracy = 7;
    string placemark = 8;
    string geo_fence_id = 9;
    string time_id = 11;
}

// SendLocationRequest is request to send a single location
message SendLocationRequest {
    string user_id = 1;
    Status status_id = 2;
    Location location = 3;
}

// SendLocationsRequest is request to send a collection of location
message SendLocationsRequest {
    string user_id = 1;
    Status status_id = 2;
    repeated Location locations = 3;
}

// Status is user status
enum Status {
    UNKNOWN = 0;
    POSITIVE = 1;
    NEGATIVE = 2;
    RECOVERED = 3;
}

// UpdateUserStatusRequest is request to update user status
message UpdateUserStatusRequest {
    string phone_number = 1;
    Status status = 2;
}

// AddUserRequest is request to add a user
message AddUserRequest {
    User user = 1;
}

// User is an app user
message User {
    string phone_number = 1;
    string full_name = 2;
    string county = 3;
    Status status = 4;
    string device_token = 5;
    bool traced = 6;   
}

// GetUserRequest is request to retrieve a single user
message GetUserRequest {
    string phone_number = 1;
}

// ListUsersRequest is request to get collection of users from database
message ListUsersRequest {
    int32 page_size = 1;
    int32 page_token = 2;
    Status filter_status = 3;
}

// ListUsersResponse is response after fetching users
message ListUsersResponse {
    repeated User users = 1;
    int32 next_page_token = 2;
}

// Manages user locations and activities
service LocationTracingAPI {
    // Send a single location to the server
    rpc SendLocation (SendLocationRequest) returns (google.protobuf.Empty) {
        // Maps to HTTP POST
        // Everything maps to the body of the request
        option (google.api.http) = {
            post: "/api/v1/locations/send"
            body: "*"
        };
    };

    // Sends user locations
    rpc SendLocations (SendLocationsRequest) returns (google.protobuf.Empty) {
        // Maps to HTTP POST
        // Everything maps to the body of the request
        option (google.api.http) = {
            post: "/api/v1/locations/send/bulk"
            body: "*"
        };
    };

    // Updates user status
    rpc UpdateUserStatus (UpdateUserStatusRequest) returns (google.protobuf.Empty) {
        // Maps to HTTP PATCH
        // Everything maps to the body of the request
        option (google.api.http) = {
            patch: "/api/v1/users/{phone_number}/status"
            body: "*"
        };
    };

    // Add a new user
    rpc AddUser (AddUserRequest) returns (google.protobuf.Empty) {
        // Maps to HTTP POST
        // Everything maps to the body of the request
        option (google.api.http) = {
            post: "/api/v1/users/action/add"
            body: "*"
        };
    };

    // Retrieves a single user
    rpc GetUser (GetUserRequest) returns (User) {
        // Maps to HTTP GET
        // phone_number is passed as url path parameter
        option (google.api.http) = {
            post: "/api/v1/users/{phone_number}"
            body: "*"
        };
    };

    // Retrieves a collection of users
    rpc ListUsers (ListUsersRequest) returns (ListUsersResponse) {
        // Maps to HTTP GET
        // phone_number is passed as url path parameter
        option (google.api.http) = {
            post: "/api/v1/users/action/list"
            body: "*"
        };
    };
}

// TraceUserLocationsRequest is request to trace a user locations
message TraceUserLocationsRequest {
    string phone_number = 1;
    string since_date = 2;
}

// Traces user previous locations
service ContactTracing {
    // Traces user locations and matching corresponding contact points
    rpc TraceUserLocations (TraceUserLocationsRequest) returns (google.longrunning.Operation) {
        // Maps to HTTP POST
        // Everything maps to the body of the request
        option (google.api.http) = {
            post: "/api/v1/trace/locations"
            body: "*"
        };
    };
}

// ContactData contains locational contacts infomation
message ContactData {
    int32 count = 1;
    string user_phone = 2;
    string full_name = 3;
    string patient_phone = 4;
    string device_token = 5;
    repeated ContactPoint contact_points = 6;
}

// BroadCastMessageResponse is response after a message has been broadcasted containing the broadcast id
message BroadCastMessageResponse {
    string broadcast_message_id = 1;
}

// ContactPoint is a geographic contact point at a particular time
message ContactPoint {
    string geo_fence_id = 1;
    string time_id = 2;
}

// BroadCastMessageFilter is type filter for broadcast messages
enum BroadCastMessageFilter {
    ALL = 0;
    BY_COUNTY = 1;
    POSITIVES = 2;
    NEGATIVES = 3;
}

// BroadCastMessageRequest is request to broadcast message to users
message BroadCastMessageRequest {
    string title = 1;
    string message = 2;
    MessageType type = 3;
    repeated BroadCastMessageFilter filters = 4;
    repeated string topics = 5;
    map<string, string> payload = 6;
}

// MessageType is category of a message
enum MessageType {
    ANY = 0;
    ALERT = 1;
    WARNING = 2;
    INFO = 3;
}

// Message is a message payload
message Message {
    string message_id = 1;
    string user_phone = 2;
    string title = 3;
    string notification = 4;
    int64 timestamp = 5;
    bool sent = 6;
    MessageType type = 7;
    map<string, string> data = 8;
}

// SendMessageResponse is response after sending message contains message id
message SendMessageResponse {
    string message_id = 1;
}

// GetMessagesRequest is request to get user messages
message GetMessagesRequest {
    string phone_number = 1;
    int32 page_token = 2;
    int32 page_size = 3;
}

// Messages is a collection of user messages
message Messages {
    repeated Message messages = 1;
}

// Sends messages to devices and destinations
service Messaging {
    // Alerts on possible contact points with a positive patient
    rpc AlertContacts (stream ContactData) returns (google.protobuf.Empty) {
        // Maps to HTTP POST
        // Everything maps to the body of the request
        option (google.api.http) = {
            post: "/api/v1/messaging/alert"
            body: "*"
        };
    };

    // Broadcasts a message
    rpc BroadCastMessage (BroadCastMessageRequest) returns (BroadCastMessageResponse) {
        // Maps to HTTP POST
        // Everything maps to the body of the request
        option (google.api.http) = {
            post: "/api/v1/messaging/broadcast"
            body: "*"
        };
    };

    // Sends message to a single destination
    rpc SendMessage (Message) returns (SendMessageResponse) {
        // Maps to HTTP POST
        // Everything maps to the body of the request
        option (google.api.http) = {
            post: "/api/v1/messaging/send"
            body: "*"
        };
    };

    // Retrieves user messages
    rpc GetMessages (GetMessagesRequest) returns (Messages) {
        // Maps to HTTP GET
        // Everything maps to the body of the request
        option (google.api.http) = {
            get: "/api/v1/messaging/messages/{phone_number}"
        };
    };
}