syntax = "proto3";

package covitrace;

option go_package="location";

import "google/protobuf/empty.proto";
import "google/longrunning/operations.proto";

// Represents a geographic location
message Location {
    float longitude = 1;
    float latitude = 2;
    int64 timestamp = 3;
    float accuracy = 4;
    float altitude = 5;
    float speed = 6;
    float speed_accuracy = 7;
    string placemark = 8;
    string geo_fence_id = 9;
    string time_id = 11;
}

// SendLocationRequest is request to send a single location
message SendLocationRequest {
    string user_id = 1;
    Status status_id = 2;
    Location location = 3;
}

// SendLocationsRequest is request to send a collection of location
message SendLocationsRequest {
    string user_id = 1;
    Status status_id = 2;
    repeated Location locations = 3;
}

// Status is user status
enum Status {
    UNKNOWN = 0;
    POSITIVE = 1;
    NEGATIVE = 2;
    RECOVERED = 3;
}

// UpdateUserStatusRequest is request to update user status
message UpdateUserStatusRequest {
    string phone_number = 1;
    Status status = 2;
}

// AddUserRequest is request to add a user
message AddUserRequest {
    string phone_number = 1;
    Status status_id = 2;
    string full_name = 3;
    string device_token = 4;
    string county = 5;
}

// Manages user locations and activities
service LocationTracingAPI {
    // Send a single location to the server
    rpc SendLocation (SendLocationRequest) returns (google.protobuf.Empty);
    // Sends user locations
    rpc SendLocations (stream SendLocationRequest) returns (google.protobuf.Empty);
    // Updates user status
    rpc UpdateUserStatus (UpdateUserStatusRequest) returns (google.protobuf.Empty);
    // Add a new user
    rpc AddUser (AddUserRequest) returns (google.protobuf.Empty);
}

// TraceUserLocationsRequest is request to trace a user locations
message TraceUserLocationsRequest {
    string phone_number = 1;
    string since_date = 2;
}

// Traces user previous locations
service ContactTracing {
    rpc TraceUserLocations (TraceUserLocationsRequest) returns (google.longrunning.Operation);
}

// ContactData contains locational contacts infomation
message ContactData {
    int32 count = 1;
    string user_phone = 2;
    string full_name = 3;
    string patient_phone = 4;
    string device_token = 5;
    repeated ContactPoint contact_points = 6;
}

// BroadCastMessageResponse is response after a message has been broadcasted containing the broadcast id
message BroadCastMessageResponse {
    string broadcast_message_id = 1;
}

// ContactPoint is a geographic contact point at a particular time
message ContactPoint {
    string geo_fence_id = 1;
    string time_id = 2;
}

// BroadCastMessageFilter is type filter for broadcast messages
enum BroadCastMessageFilter {
    ALL = 0;
    BY_COUNTY = 1;
    POSITIVES = 2;
    NEGATIVES = 3;
}

// BroadCastMessageRequest is request to broadcast message to users
message BroadCastMessageRequest {
    string title = 1;
    string message = 2;
    repeated BroadCastMessageFilter filters = 3;
    repeated string topics = 4;
    map<string, string> payload = 5;
}

// SendMessageRequest is request to send message to a user
message SendMessageRequest {
    string user_phone = 1;
    string title = 2;
    string message = 3;
    map<string, string> payload = 4;
}

// SendMessageResponse is response after sending message contains message id
message SendMessageResponse {
    string message_id = 1;
}

// Sends messages to devices and destinations
service Messaging {
    rpc AlertContacts (stream ContactData) returns (google.protobuf.Empty);
    rpc BroadCastMessage (BroadCastMessageRequest) returns (BroadCastMessageResponse);
    rpc SendMessage (SendMessageRequest) returns (SendMessageResponse);
}