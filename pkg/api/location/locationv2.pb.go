// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: locationv2.proto

package location

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Status is user status
type Status int32

const (
	Status_UNKNOWN   Status = 0
	Status_POSITIVE  Status = 1
	Status_NEGATIVE  Status = 2
	Status_RECOVERED Status = 3
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "POSITIVE",
		2: "NEGATIVE",
		3: "RECOVERED",
	}
	Status_value = map[string]int32{
		"UNKNOWN":   0,
		"POSITIVE":  1,
		"NEGATIVE":  2,
		"RECOVERED": 3,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_locationv2_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_locationv2_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_locationv2_proto_rawDescGZIP(), []int{0}
}

// BroadCastMessageFilter is type filter for broadcast messages
type BroadCastMessageFilter int32

const (
	BroadCastMessageFilter_ALL       BroadCastMessageFilter = 0
	BroadCastMessageFilter_BY_COUNTY BroadCastMessageFilter = 1
	BroadCastMessageFilter_POSITIVES BroadCastMessageFilter = 2
	BroadCastMessageFilter_NEGATIVES BroadCastMessageFilter = 3
)

// Enum value maps for BroadCastMessageFilter.
var (
	BroadCastMessageFilter_name = map[int32]string{
		0: "ALL",
		1: "BY_COUNTY",
		2: "POSITIVES",
		3: "NEGATIVES",
	}
	BroadCastMessageFilter_value = map[string]int32{
		"ALL":       0,
		"BY_COUNTY": 1,
		"POSITIVES": 2,
		"NEGATIVES": 3,
	}
)

func (x BroadCastMessageFilter) Enum() *BroadCastMessageFilter {
	p := new(BroadCastMessageFilter)
	*p = x
	return p
}

func (x BroadCastMessageFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BroadCastMessageFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_locationv2_proto_enumTypes[1].Descriptor()
}

func (BroadCastMessageFilter) Type() protoreflect.EnumType {
	return &file_locationv2_proto_enumTypes[1]
}

func (x BroadCastMessageFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BroadCastMessageFilter.Descriptor instead.
func (BroadCastMessageFilter) EnumDescriptor() ([]byte, []int) {
	return file_locationv2_proto_rawDescGZIP(), []int{1}
}

// Represents a geographic location
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude     float32 `protobuf:"fixed32,1,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude      float32 `protobuf:"fixed32,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Timestamp     int64   `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Accuracy      float32 `protobuf:"fixed32,4,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	Altitude      float32 `protobuf:"fixed32,5,opt,name=altitude,proto3" json:"altitude,omitempty"`
	Speed         float32 `protobuf:"fixed32,6,opt,name=speed,proto3" json:"speed,omitempty"`
	SpeedAccuracy float32 `protobuf:"fixed32,7,opt,name=speed_accuracy,json=speedAccuracy,proto3" json:"speed_accuracy,omitempty"`
	Placemark     string  `protobuf:"bytes,8,opt,name=placemark,proto3" json:"placemark,omitempty"`
	GeoFenceId    string  `protobuf:"bytes,9,opt,name=geo_fence_id,json=geoFenceId,proto3" json:"geo_fence_id,omitempty"`
	TimeId        string  `protobuf:"bytes,11,opt,name=time_id,json=timeId,proto3" json:"time_id,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_locationv2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_locationv2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_locationv2_proto_rawDescGZIP(), []int{0}
}

func (x *Location) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Location) GetAccuracy() float32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *Location) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *Location) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Location) GetSpeedAccuracy() float32 {
	if x != nil {
		return x.SpeedAccuracy
	}
	return 0
}

func (x *Location) GetPlacemark() string {
	if x != nil {
		return x.Placemark
	}
	return ""
}

func (x *Location) GetGeoFenceId() string {
	if x != nil {
		return x.GeoFenceId
	}
	return ""
}

func (x *Location) GetTimeId() string {
	if x != nil {
		return x.TimeId
	}
	return ""
}

// SendLocationRequest is request to send a single location
type SendLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string    `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StatusId Status    `protobuf:"varint,2,opt,name=status_id,json=statusId,proto3,enum=covitrace.Status" json:"status_id,omitempty"`
	Location *Location `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *SendLocationRequest) Reset() {
	*x = SendLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_locationv2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLocationRequest) ProtoMessage() {}

func (x *SendLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_locationv2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLocationRequest.ProtoReflect.Descriptor instead.
func (*SendLocationRequest) Descriptor() ([]byte, []int) {
	return file_locationv2_proto_rawDescGZIP(), []int{1}
}

func (x *SendLocationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SendLocationRequest) GetStatusId() Status {
	if x != nil {
		return x.StatusId
	}
	return Status_UNKNOWN
}

func (x *SendLocationRequest) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

// SendLocationsRequest is request to send a collection of location
type SendLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string      `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StatusId  Status      `protobuf:"varint,2,opt,name=status_id,json=statusId,proto3,enum=covitrace.Status" json:"status_id,omitempty"`
	Locations []*Location `protobuf:"bytes,3,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *SendLocationsRequest) Reset() {
	*x = SendLocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_locationv2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLocationsRequest) ProtoMessage() {}

func (x *SendLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_locationv2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLocationsRequest.ProtoReflect.Descriptor instead.
func (*SendLocationsRequest) Descriptor() ([]byte, []int) {
	return file_locationv2_proto_rawDescGZIP(), []int{2}
}

func (x *SendLocationsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SendLocationsRequest) GetStatusId() Status {
	if x != nil {
		return x.StatusId
	}
	return Status_UNKNOWN
}

func (x *SendLocationsRequest) GetLocations() []*Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

// UpdateUserStatusRequest is request to update user status
type UpdateUserStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Status      Status `protobuf:"varint,2,opt,name=status,proto3,enum=covitrace.Status" json:"status,omitempty"`
}

func (x *UpdateUserStatusRequest) Reset() {
	*x = UpdateUserStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_locationv2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserStatusRequest) ProtoMessage() {}

func (x *UpdateUserStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_locationv2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserStatusRequest) Descriptor() ([]byte, []int) {
	return file_locationv2_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateUserStatusRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UpdateUserStatusRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

// AddUserRequest is request to add a user
type AddUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	StatusId    Status `protobuf:"varint,2,opt,name=status_id,json=statusId,proto3,enum=covitrace.Status" json:"status_id,omitempty"`
	FullName    string `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	DeviceToken string `protobuf:"bytes,4,opt,name=device_token,json=deviceToken,proto3" json:"device_token,omitempty"`
	County      string `protobuf:"bytes,5,opt,name=county,proto3" json:"county,omitempty"`
}

func (x *AddUserRequest) Reset() {
	*x = AddUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_locationv2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserRequest) ProtoMessage() {}

func (x *AddUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_locationv2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserRequest.ProtoReflect.Descriptor instead.
func (*AddUserRequest) Descriptor() ([]byte, []int) {
	return file_locationv2_proto_rawDescGZIP(), []int{4}
}

func (x *AddUserRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *AddUserRequest) GetStatusId() Status {
	if x != nil {
		return x.StatusId
	}
	return Status_UNKNOWN
}

func (x *AddUserRequest) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *AddUserRequest) GetDeviceToken() string {
	if x != nil {
		return x.DeviceToken
	}
	return ""
}

func (x *AddUserRequest) GetCounty() string {
	if x != nil {
		return x.County
	}
	return ""
}

// TraceUserLocationsRequest is request to trace a user locations
type TraceUserLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	SinceDate   string `protobuf:"bytes,2,opt,name=since_date,json=sinceDate,proto3" json:"since_date,omitempty"`
}

func (x *TraceUserLocationsRequest) Reset() {
	*x = TraceUserLocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_locationv2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceUserLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceUserLocationsRequest) ProtoMessage() {}

func (x *TraceUserLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_locationv2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceUserLocationsRequest.ProtoReflect.Descriptor instead.
func (*TraceUserLocationsRequest) Descriptor() ([]byte, []int) {
	return file_locationv2_proto_rawDescGZIP(), []int{5}
}

func (x *TraceUserLocationsRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *TraceUserLocationsRequest) GetSinceDate() string {
	if x != nil {
		return x.SinceDate
	}
	return ""
}

// ContactData contains locational contacts infomation
type ContactData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count         int32           `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	UserPhone     string          `protobuf:"bytes,2,opt,name=user_phone,json=userPhone,proto3" json:"user_phone,omitempty"`
	FullName      string          `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	PatientPhone  string          `protobuf:"bytes,4,opt,name=patient_phone,json=patientPhone,proto3" json:"patient_phone,omitempty"`
	DeviceToken   string          `protobuf:"bytes,5,opt,name=device_token,json=deviceToken,proto3" json:"device_token,omitempty"`
	ContactPoints []*ContactPoint `protobuf:"bytes,6,rep,name=contact_points,json=contactPoints,proto3" json:"contact_points,omitempty"`
}

func (x *ContactData) Reset() {
	*x = ContactData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_locationv2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactData) ProtoMessage() {}

func (x *ContactData) ProtoReflect() protoreflect.Message {
	mi := &file_locationv2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactData.ProtoReflect.Descriptor instead.
func (*ContactData) Descriptor() ([]byte, []int) {
	return file_locationv2_proto_rawDescGZIP(), []int{6}
}

func (x *ContactData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ContactData) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *ContactData) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *ContactData) GetPatientPhone() string {
	if x != nil {
		return x.PatientPhone
	}
	return ""
}

func (x *ContactData) GetDeviceToken() string {
	if x != nil {
		return x.DeviceToken
	}
	return ""
}

func (x *ContactData) GetContactPoints() []*ContactPoint {
	if x != nil {
		return x.ContactPoints
	}
	return nil
}

// BroadCastMessageResponse is response after a message has been broadcasted containing the broadcast id
type BroadCastMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastMessageId string `protobuf:"bytes,1,opt,name=broadcast_message_id,json=broadcastMessageId,proto3" json:"broadcast_message_id,omitempty"`
}

func (x *BroadCastMessageResponse) Reset() {
	*x = BroadCastMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_locationv2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadCastMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadCastMessageResponse) ProtoMessage() {}

func (x *BroadCastMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_locationv2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadCastMessageResponse.ProtoReflect.Descriptor instead.
func (*BroadCastMessageResponse) Descriptor() ([]byte, []int) {
	return file_locationv2_proto_rawDescGZIP(), []int{7}
}

func (x *BroadCastMessageResponse) GetBroadcastMessageId() string {
	if x != nil {
		return x.BroadcastMessageId
	}
	return ""
}

// ContactPoint is a geographic contact point at a particular time
type ContactPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoFenceId string `protobuf:"bytes,1,opt,name=geo_fence_id,json=geoFenceId,proto3" json:"geo_fence_id,omitempty"`
	TimeId     string `protobuf:"bytes,2,opt,name=time_id,json=timeId,proto3" json:"time_id,omitempty"`
}

func (x *ContactPoint) Reset() {
	*x = ContactPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_locationv2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPoint) ProtoMessage() {}

func (x *ContactPoint) ProtoReflect() protoreflect.Message {
	mi := &file_locationv2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPoint.ProtoReflect.Descriptor instead.
func (*ContactPoint) Descriptor() ([]byte, []int) {
	return file_locationv2_proto_rawDescGZIP(), []int{8}
}

func (x *ContactPoint) GetGeoFenceId() string {
	if x != nil {
		return x.GeoFenceId
	}
	return ""
}

func (x *ContactPoint) GetTimeId() string {
	if x != nil {
		return x.TimeId
	}
	return ""
}

// BroadCastMessageRequest is request to broadcast message to users
type BroadCastMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string                   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Message string                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Filters []BroadCastMessageFilter `protobuf:"varint,3,rep,packed,name=filters,proto3,enum=covitrace.BroadCastMessageFilter" json:"filters,omitempty"`
	Topics  []string                 `protobuf:"bytes,4,rep,name=topics,proto3" json:"topics,omitempty"`
	Payload map[string]string        `protobuf:"bytes,5,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BroadCastMessageRequest) Reset() {
	*x = BroadCastMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_locationv2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadCastMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadCastMessageRequest) ProtoMessage() {}

func (x *BroadCastMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_locationv2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadCastMessageRequest.ProtoReflect.Descriptor instead.
func (*BroadCastMessageRequest) Descriptor() ([]byte, []int) {
	return file_locationv2_proto_rawDescGZIP(), []int{9}
}

func (x *BroadCastMessageRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BroadCastMessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BroadCastMessageRequest) GetFilters() []BroadCastMessageFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *BroadCastMessageRequest) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *BroadCastMessageRequest) GetPayload() map[string]string {
	if x != nil {
		return x.Payload
	}
	return nil
}

// SendMessageRequest is request to send message to a user
type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPhone string            `protobuf:"bytes,1,opt,name=user_phone,json=userPhone,proto3" json:"user_phone,omitempty"`
	Title     string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Message   string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Payload   map[string]string `protobuf:"bytes,4,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_locationv2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_locationv2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_locationv2_proto_rawDescGZIP(), []int{10}
}

func (x *SendMessageRequest) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *SendMessageRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SendMessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SendMessageRequest) GetPayload() map[string]string {
	if x != nil {
		return x.Payload
	}
	return nil
}

// SendMessageResponse is response after sending message contains message id
type SendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_locationv2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_locationv2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_locationv2_proto_rawDescGZIP(), []int{11}
}

func (x *SendMessageResponse) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

var File_locationv2_proto protoreflect.FileDescriptor

var file_locationv2_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x76, 0x69, 0x74, 0x72, 0x61, 0x63, 0x65, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb0, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x66,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x65, 0x6f, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x76, 0x69,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x76, 0x69,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x67, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x76, 0x69, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x22, 0x5d, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22,
	0xe7, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x18, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x66,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x65, 0x6f, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x64, 0x22, 0xa5, 0x02, 0x0a, 0x17, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x43, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x3a,
	0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe5, 0x01, 0x0a, 0x12, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x44, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x34, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x2a, 0x40, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x4e, 0x0a, 0x16, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x42, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x53, 0x10, 0x03, 0x32, 0xb5, 0x02, 0x0a, 0x12, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x41, 0x50,
	0x49, 0x12, 0x46, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0d, 0x53, 0x65, 0x6e,
	0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x76,
	0x69, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x28, 0x01, 0x12, 0x4e, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x19, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x32, 0x6b, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x76,
	0x69, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0xf9, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a,
	0x0d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x16,
	0x2e, 0x63, 0x6f, 0x76, 0x69, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01,
	0x12, 0x5b, 0x0a, 0x10, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x63,
	0x6f, 0x76, 0x69, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f,
	0x76, 0x69, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_locationv2_proto_rawDescOnce sync.Once
	file_locationv2_proto_rawDescData = file_locationv2_proto_rawDesc
)

func file_locationv2_proto_rawDescGZIP() []byte {
	file_locationv2_proto_rawDescOnce.Do(func() {
		file_locationv2_proto_rawDescData = protoimpl.X.CompressGZIP(file_locationv2_proto_rawDescData)
	})
	return file_locationv2_proto_rawDescData
}

var file_locationv2_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_locationv2_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_locationv2_proto_goTypes = []interface{}{
	(Status)(0),                       // 0: covitrace.Status
	(BroadCastMessageFilter)(0),       // 1: covitrace.BroadCastMessageFilter
	(*Location)(nil),                  // 2: covitrace.Location
	(*SendLocationRequest)(nil),       // 3: covitrace.SendLocationRequest
	(*SendLocationsRequest)(nil),      // 4: covitrace.SendLocationsRequest
	(*UpdateUserStatusRequest)(nil),   // 5: covitrace.UpdateUserStatusRequest
	(*AddUserRequest)(nil),            // 6: covitrace.AddUserRequest
	(*TraceUserLocationsRequest)(nil), // 7: covitrace.TraceUserLocationsRequest
	(*ContactData)(nil),               // 8: covitrace.ContactData
	(*BroadCastMessageResponse)(nil),  // 9: covitrace.BroadCastMessageResponse
	(*ContactPoint)(nil),              // 10: covitrace.ContactPoint
	(*BroadCastMessageRequest)(nil),   // 11: covitrace.BroadCastMessageRequest
	(*SendMessageRequest)(nil),        // 12: covitrace.SendMessageRequest
	(*SendMessageResponse)(nil),       // 13: covitrace.SendMessageResponse
	nil,                               // 14: covitrace.BroadCastMessageRequest.PayloadEntry
	nil,                               // 15: covitrace.SendMessageRequest.PayloadEntry
	(*empty.Empty)(nil),               // 16: google.protobuf.Empty
	(*longrunning.Operation)(nil),     // 17: google.longrunning.Operation
}
var file_locationv2_proto_depIdxs = []int32{
	0,  // 0: covitrace.SendLocationRequest.status_id:type_name -> covitrace.Status
	2,  // 1: covitrace.SendLocationRequest.location:type_name -> covitrace.Location
	0,  // 2: covitrace.SendLocationsRequest.status_id:type_name -> covitrace.Status
	2,  // 3: covitrace.SendLocationsRequest.locations:type_name -> covitrace.Location
	0,  // 4: covitrace.UpdateUserStatusRequest.status:type_name -> covitrace.Status
	0,  // 5: covitrace.AddUserRequest.status_id:type_name -> covitrace.Status
	10, // 6: covitrace.ContactData.contact_points:type_name -> covitrace.ContactPoint
	1,  // 7: covitrace.BroadCastMessageRequest.filters:type_name -> covitrace.BroadCastMessageFilter
	14, // 8: covitrace.BroadCastMessageRequest.payload:type_name -> covitrace.BroadCastMessageRequest.PayloadEntry
	15, // 9: covitrace.SendMessageRequest.payload:type_name -> covitrace.SendMessageRequest.PayloadEntry
	3,  // 10: covitrace.LocationTracingAPI.SendLocation:input_type -> covitrace.SendLocationRequest
	3,  // 11: covitrace.LocationTracingAPI.SendLocations:input_type -> covitrace.SendLocationRequest
	5,  // 12: covitrace.LocationTracingAPI.UpdateUserStatus:input_type -> covitrace.UpdateUserStatusRequest
	6,  // 13: covitrace.LocationTracingAPI.AddUser:input_type -> covitrace.AddUserRequest
	7,  // 14: covitrace.ContactTracing.TraceUserLocations:input_type -> covitrace.TraceUserLocationsRequest
	8,  // 15: covitrace.Messaging.AlertContacts:input_type -> covitrace.ContactData
	11, // 16: covitrace.Messaging.BroadCastMessage:input_type -> covitrace.BroadCastMessageRequest
	12, // 17: covitrace.Messaging.SendMessage:input_type -> covitrace.SendMessageRequest
	16, // 18: covitrace.LocationTracingAPI.SendLocation:output_type -> google.protobuf.Empty
	16, // 19: covitrace.LocationTracingAPI.SendLocations:output_type -> google.protobuf.Empty
	16, // 20: covitrace.LocationTracingAPI.UpdateUserStatus:output_type -> google.protobuf.Empty
	16, // 21: covitrace.LocationTracingAPI.AddUser:output_type -> google.protobuf.Empty
	17, // 22: covitrace.ContactTracing.TraceUserLocations:output_type -> google.longrunning.Operation
	16, // 23: covitrace.Messaging.AlertContacts:output_type -> google.protobuf.Empty
	9,  // 24: covitrace.Messaging.BroadCastMessage:output_type -> covitrace.BroadCastMessageResponse
	13, // 25: covitrace.Messaging.SendMessage:output_type -> covitrace.SendMessageResponse
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_locationv2_proto_init() }
func file_locationv2_proto_init() {
	if File_locationv2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_locationv2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_locationv2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_locationv2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendLocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_locationv2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_locationv2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_locationv2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceUserLocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_locationv2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_locationv2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadCastMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_locationv2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_locationv2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadCastMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_locationv2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_locationv2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_locationv2_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_locationv2_proto_goTypes,
		DependencyIndexes: file_locationv2_proto_depIdxs,
		EnumInfos:         file_locationv2_proto_enumTypes,
		MessageInfos:      file_locationv2_proto_msgTypes,
	}.Build()
	File_locationv2_proto = out.File
	file_locationv2_proto_rawDesc = nil
	file_locationv2_proto_goTypes = nil
	file_locationv2_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LocationTracingAPIClient is the client API for LocationTracingAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocationTracingAPIClient interface {
	// Send a single location to the server
	SendLocation(ctx context.Context, in *SendLocationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Sends user locations
	SendLocations(ctx context.Context, opts ...grpc.CallOption) (LocationTracingAPI_SendLocationsClient, error)
	// Updates user status
	UpdateUserStatus(ctx context.Context, in *UpdateUserStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Add a new user
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type locationTracingAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationTracingAPIClient(cc grpc.ClientConnInterface) LocationTracingAPIClient {
	return &locationTracingAPIClient{cc}
}

func (c *locationTracingAPIClient) SendLocation(ctx context.Context, in *SendLocationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/covitrace.LocationTracingAPI/SendLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationTracingAPIClient) SendLocations(ctx context.Context, opts ...grpc.CallOption) (LocationTracingAPI_SendLocationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocationTracingAPI_serviceDesc.Streams[0], "/covitrace.LocationTracingAPI/SendLocations", opts...)
	if err != nil {
		return nil, err
	}
	x := &locationTracingAPISendLocationsClient{stream}
	return x, nil
}

type LocationTracingAPI_SendLocationsClient interface {
	Send(*SendLocationRequest) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type locationTracingAPISendLocationsClient struct {
	grpc.ClientStream
}

func (x *locationTracingAPISendLocationsClient) Send(m *SendLocationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *locationTracingAPISendLocationsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *locationTracingAPIClient) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/covitrace.LocationTracingAPI/UpdateUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationTracingAPIClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/covitrace.LocationTracingAPI/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationTracingAPIServer is the server API for LocationTracingAPI service.
type LocationTracingAPIServer interface {
	// Send a single location to the server
	SendLocation(context.Context, *SendLocationRequest) (*empty.Empty, error)
	// Sends user locations
	SendLocations(LocationTracingAPI_SendLocationsServer) error
	// Updates user status
	UpdateUserStatus(context.Context, *UpdateUserStatusRequest) (*empty.Empty, error)
	// Add a new user
	AddUser(context.Context, *AddUserRequest) (*empty.Empty, error)
}

// UnimplementedLocationTracingAPIServer can be embedded to have forward compatible implementations.
type UnimplementedLocationTracingAPIServer struct {
}

func (*UnimplementedLocationTracingAPIServer) SendLocation(context.Context, *SendLocationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLocation not implemented")
}
func (*UnimplementedLocationTracingAPIServer) SendLocations(LocationTracingAPI_SendLocationsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendLocations not implemented")
}
func (*UnimplementedLocationTracingAPIServer) UpdateUserStatus(context.Context, *UpdateUserStatusRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatus not implemented")
}
func (*UnimplementedLocationTracingAPIServer) AddUser(context.Context, *AddUserRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}

func RegisterLocationTracingAPIServer(s *grpc.Server, srv LocationTracingAPIServer) {
	s.RegisterService(&_LocationTracingAPI_serviceDesc, srv)
}

func _LocationTracingAPI_SendLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationTracingAPIServer).SendLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covitrace.LocationTracingAPI/SendLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationTracingAPIServer).SendLocation(ctx, req.(*SendLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationTracingAPI_SendLocations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocationTracingAPIServer).SendLocations(&locationTracingAPISendLocationsServer{stream})
}

type LocationTracingAPI_SendLocationsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*SendLocationRequest, error)
	grpc.ServerStream
}

type locationTracingAPISendLocationsServer struct {
	grpc.ServerStream
}

func (x *locationTracingAPISendLocationsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *locationTracingAPISendLocationsServer) Recv() (*SendLocationRequest, error) {
	m := new(SendLocationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LocationTracingAPI_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationTracingAPIServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covitrace.LocationTracingAPI/UpdateUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationTracingAPIServer).UpdateUserStatus(ctx, req.(*UpdateUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationTracingAPI_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationTracingAPIServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covitrace.LocationTracingAPI/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationTracingAPIServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocationTracingAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "covitrace.LocationTracingAPI",
	HandlerType: (*LocationTracingAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendLocation",
			Handler:    _LocationTracingAPI_SendLocation_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _LocationTracingAPI_UpdateUserStatus_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _LocationTracingAPI_AddUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendLocations",
			Handler:       _LocationTracingAPI_SendLocations_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "locationv2.proto",
}

// ContactTracingClient is the client API for ContactTracing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContactTracingClient interface {
	TraceUserLocations(ctx context.Context, in *TraceUserLocationsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type contactTracingClient struct {
	cc grpc.ClientConnInterface
}

func NewContactTracingClient(cc grpc.ClientConnInterface) ContactTracingClient {
	return &contactTracingClient{cc}
}

func (c *contactTracingClient) TraceUserLocations(ctx context.Context, in *TraceUserLocationsRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/covitrace.ContactTracing/TraceUserLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactTracingServer is the server API for ContactTracing service.
type ContactTracingServer interface {
	TraceUserLocations(context.Context, *TraceUserLocationsRequest) (*longrunning.Operation, error)
}

// UnimplementedContactTracingServer can be embedded to have forward compatible implementations.
type UnimplementedContactTracingServer struct {
}

func (*UnimplementedContactTracingServer) TraceUserLocations(context.Context, *TraceUserLocationsRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraceUserLocations not implemented")
}

func RegisterContactTracingServer(s *grpc.Server, srv ContactTracingServer) {
	s.RegisterService(&_ContactTracing_serviceDesc, srv)
}

func _ContactTracing_TraceUserLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceUserLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactTracingServer).TraceUserLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covitrace.ContactTracing/TraceUserLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactTracingServer).TraceUserLocations(ctx, req.(*TraceUserLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContactTracing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "covitrace.ContactTracing",
	HandlerType: (*ContactTracingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TraceUserLocations",
			Handler:    _ContactTracing_TraceUserLocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "locationv2.proto",
}

// MessagingClient is the client API for Messaging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessagingClient interface {
	AlertContacts(ctx context.Context, opts ...grpc.CallOption) (Messaging_AlertContactsClient, error)
	BroadCastMessage(ctx context.Context, in *BroadCastMessageRequest, opts ...grpc.CallOption) (*BroadCastMessageResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
}

type messagingClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingClient(cc grpc.ClientConnInterface) MessagingClient {
	return &messagingClient{cc}
}

func (c *messagingClient) AlertContacts(ctx context.Context, opts ...grpc.CallOption) (Messaging_AlertContactsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messaging_serviceDesc.Streams[0], "/covitrace.Messaging/AlertContacts", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingAlertContactsClient{stream}
	return x, nil
}

type Messaging_AlertContactsClient interface {
	Send(*ContactData) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type messagingAlertContactsClient struct {
	grpc.ClientStream
}

func (x *messagingAlertContactsClient) Send(m *ContactData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagingAlertContactsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingClient) BroadCastMessage(ctx context.Context, in *BroadCastMessageRequest, opts ...grpc.CallOption) (*BroadCastMessageResponse, error) {
	out := new(BroadCastMessageResponse)
	err := c.cc.Invoke(ctx, "/covitrace.Messaging/BroadCastMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/covitrace.Messaging/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagingServer is the server API for Messaging service.
type MessagingServer interface {
	AlertContacts(Messaging_AlertContactsServer) error
	BroadCastMessage(context.Context, *BroadCastMessageRequest) (*BroadCastMessageResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
}

// UnimplementedMessagingServer can be embedded to have forward compatible implementations.
type UnimplementedMessagingServer struct {
}

func (*UnimplementedMessagingServer) AlertContacts(Messaging_AlertContactsServer) error {
	return status.Errorf(codes.Unimplemented, "method AlertContacts not implemented")
}
func (*UnimplementedMessagingServer) BroadCastMessage(context.Context, *BroadCastMessageRequest) (*BroadCastMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadCastMessage not implemented")
}
func (*UnimplementedMessagingServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}

func RegisterMessagingServer(s *grpc.Server, srv MessagingServer) {
	s.RegisterService(&_Messaging_serviceDesc, srv)
}

func _Messaging_AlertContacts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagingServer).AlertContacts(&messagingAlertContactsServer{stream})
}

type Messaging_AlertContactsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*ContactData, error)
	grpc.ServerStream
}

type messagingAlertContactsServer struct {
	grpc.ServerStream
}

func (x *messagingAlertContactsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagingAlertContactsServer) Recv() (*ContactData, error) {
	m := new(ContactData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Messaging_BroadCastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadCastMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).BroadCastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covitrace.Messaging/BroadCastMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).BroadCastMessage(ctx, req.(*BroadCastMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covitrace.Messaging/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Messaging_serviceDesc = grpc.ServiceDesc{
	ServiceName: "covitrace.Messaging",
	HandlerType: (*MessagingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadCastMessage",
			Handler:    _Messaging_BroadCastMessage_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Messaging_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AlertContacts",
			Handler:       _Messaging_AlertContacts_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "locationv2.proto",
}
